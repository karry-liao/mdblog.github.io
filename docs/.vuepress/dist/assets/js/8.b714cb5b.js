(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{281:function(t,a,r){"use strict";r.r(a);var s=r(11),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-的常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的常用方法"}},[t._v("#")]),t._v(" JavaScript 的常用方法")]),t._v(" "),a("h2",{attrs:{id:"一、string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、string类型"}},[t._v("#")]),t._v(" 一、String类型")]),t._v(" "),a("h3",{attrs:{id:"_1-charat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-charat"}},[t._v("#")]),t._v(" 1.charAt")]),t._v(" "),a("p",[t._v("​\t\t\t返回在指定位置的字符  Str.charAt(3)")]),t._v(" "),a("h3",{attrs:{id:"_2-chartcodeat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-chartcodeat"}},[t._v("#")]),t._v(" 2.chartCodeAt()")]),t._v(" "),a("p",[t._v("​\t\t\t 返回指定位置的字符编码 Str.chartCodeAt(a)")]),t._v(" "),a("h3",{attrs:{id:"_3-concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-concat"}},[t._v("#")]),t._v(" 3.concat()")]),t._v(" "),a("p",[t._v("​\t\t\t连接字符串  str1.concat(str2)")]),t._v(" "),a("h3",{attrs:{id:"_4-indexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-indexof"}},[t._v("#")]),t._v(" 4.indexOf()")]),t._v(" "),a("p",[t._v('​\t\t\t检索字符串,返回字符在字符串的下表  str.indexOf("123")   找不到匹配内容返回-1')]),t._v(" "),a("h3",{attrs:{id:"_5-match"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-match"}},[t._v("#")]),t._v(" 5.match()")]),t._v(" "),a("p",[t._v('​\t\t\t在字符串内检索指定的值或找到一个或多个正则表达式的匹配项，返回的是值不是位置。 str1.match("karry")')]),t._v(" "),a("h3",{attrs:{id:"_6-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-replace"}},[t._v("#")]),t._v(" 6.replace()")]),t._v(" "),a("p",[t._v("​\t\t\t替换匹配的字符串 str1.replace(str1.match('hao'),str2.match('lixi'))  str2替换str1")]),t._v(" "),a("h3",{attrs:{id:"_7-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-search"}},[t._v("#")]),t._v(" 7.search():")]),t._v(" "),a("p",[t._v("​\t\t\t检索与字符串匹配的字符串，返回地址  str1.search(str2)  返回第一个字符所在位置  未检测到返回-1")]),t._v(" "),a("h3",{attrs:{id:"_8-slice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-slice"}},[t._v("#")]),t._v(" 8.slice()")]),t._v(" "),a("p",[t._v("​\t\t\t 提取字符串片段,并在新的字符串中返回被提取的部分  str1.slice(4,9)")]),t._v(" "),a("h3",{attrs:{id:"_9-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-split"}},[t._v("#")]),t._v(" 9.split():")]),t._v(" "),a("p",[t._v('​\t\t\t把字符串分割成数组  str1.split("-")')]),t._v(" "),a("h3",{attrs:{id:"_10-tolocalelowercase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-tolocalelowercase"}},[t._v("#")]),t._v(" 10.toLocaleLowerCase()")]),t._v(" "),a("p",[t._v("​\t\t\t把字符串转换成小写")]),t._v(" "),a("p",[t._v("str.toLocaleLowerCase()   \t  or     str.toLowerCase()")]),t._v(" "),a("h3",{attrs:{id:"_11-tolocaleuppercase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-tolocaleuppercase"}},[t._v("#")]),t._v(" 11.toLocaleUpperCase()")]),t._v(" "),a("p",[t._v("​\t\t\t把字符串准换成大写  str.toLocaleUpperCase()  or\tstr.toUpperCase()")]),t._v(" "),a("h3",{attrs:{id:"_12-substr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-substr"}},[t._v("#")]),t._v(" 12.substr()")]),t._v(" "),a("p",[t._v("​\t\t\t从其实索引号提取字符串中指定数目的字符")]),t._v(" "),a("h3",{attrs:{id:"_13-substring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-substring"}},[t._v("#")]),t._v(" 13.subString()")]),t._v(" "),a("p",[t._v("​\t\t\t提取字符串中两个指定索引号之间的字符\n​\tvar str3 = str.substring(3,19);")]),t._v(" "),a("p",[t._v("字符串中空格占位置，从3开始，到18结束\nvar str4 = str.substr(3,19);  //空格不占位。从3开始到19结束")]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("h2",{attrs:{id:"二、数组-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、数组-array"}},[t._v("#")]),t._v(" 二、数组 Array")]),t._v(" "),a("h3",{attrs:{id:"_1-slice-start-end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-slice-start-end"}},[t._v("#")]),t._v(" 1.slice[start,end]")]),t._v(" "),a("p",[t._v("​\t\t\t返回原数组中指定开始下标到结束下标之间的组成新的数组(原数组不变);\n​\t1个参数：n，即n到末尾的所有\n​\t2个参数：[start,end]\n​\tvar arr1 = arr.slice(2,6)")]),t._v(" "),a("h3",{attrs:{id:"_2-splice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-splice"}},[t._v("#")]),t._v(" 2.splice():")]),t._v(" "),a("p",[t._v("​\t\t\t删除，2个参数，起始位置和删除的项数")]),t._v(" "),a("p",[t._v("​\tvar arr1 = arr.slice(2,3)\t实际得到的新数组的项数是end-strat")]),t._v(" "),a("h3",{attrs:{id:"_3-pop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-pop"}},[t._v("#")]),t._v(" 3.pop()")]),t._v(" "),a("p",[t._v("​\t\t\t删除数组的最后一个元素，减少数组的长度，返回被删除的值\t  arr.pop();")]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("h3",{attrs:{id:"_4-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-push"}},[t._v("#")]),t._v(" 4.push()")]),t._v(" "),a("p",[t._v("​\t\t\t将参数添加到数组的最后，返回新数组的长度\tarr.push(6,7,8);")]),t._v(" "),a("h3",{attrs:{id:"_5-shift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-shift"}},[t._v("#")]),t._v(" 5.shift()")]),t._v(" "),a("p",[t._v("​\t\t\t删除数组的第一个参数，数组的长度减1，无参\tarr.shift();")]),t._v(" "),a("h3",{attrs:{id:"_6-unshift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-unshift"}},[t._v("#")]),t._v(" 6.unshift()")]),t._v(" "),a("p",[t._v("​\t\t\t像数组的开头添加一个或更多的元素，并返回新的长度。（参数不限）\t arr.unshift(2,4,5,{name:'liqi'});")]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("h3",{attrs:{id:"_7-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-sort"}},[t._v("#")]),t._v(" 7.sort()")]),t._v(" "),a("p",[t._v("​\t\t\t按指定的参数对数组进行排序，返回的值是经过排序后的数组（无参，函数）  arr.sort();")]),t._v(" "),a("h3",{attrs:{id:"_8-concat-3-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-concat-3-4"}},[t._v("#")]),t._v(" 8.concat(3,4)")]),t._v(" "),a("p",[t._v("​\t\t\t把两个字符串连接起来，返回的值是一个副本（参数不限）arr1.concat(3,arr1)")]),t._v(" "),a("p",[t._v("​")]),t._v(" "),a("h3",{attrs:{id:"_9-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-join"}},[t._v("#")]),t._v(" 9.join()")]),t._v(" "),a("p",[t._v("​\t\t\t将数组的元素组成一个字符串\tvar arr2 = arr1.join(',');//以逗号分隔\n​\t\t\t\t\tvar arr3 = arr1.join('');//以空格分隔")]),t._v(" "),a("h3",{attrs:{id:"_10-indexof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-indexof"}},[t._v("#")]),t._v(" 10.indexOf()")]),t._v(" "),a("p",[t._v("​\t\t\t从数组的开头向后查找，接受两个参数，要查找的项和查找起点的位置索引\n​\t\t\t\t\tvar num = arr.indexOf(78,3);//查找78所在的位置")]),t._v(" "),a("h3",{attrs:{id:"_11-foeeach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-foeeach"}},[t._v("#")]),t._v(" 11.foeEach()")]),t._v(" "),a("p",[t._v("​\t\t\t对数组的每个元素执行一次提供的函数。array1.forEach(function(element) {\n​\t\t\t\t\t\t  console.log(element);\n​\t\t\t\t\t\t});")]),t._v(" "),a("h3",{attrs:{id:"_12-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-map"}},[t._v("#")]),t._v(" 12.map")]),t._v(" "),a("p",[t._v("​\t\t\t对数组的每一项运行给定的函数，返回没次函数调用的结果组成的数组\n​\t\t\t\t\t\t array1.map(x => x * 2); //对数组的每项*2")]),t._v(" "),a("h3",{attrs:{id:"_13-for-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-for-in"}},[t._v("#")]),t._v(" 13.for in")]),t._v(" "),a("p",[t._v("​\t\t\t遍历数组")]),t._v(" "),a("p",[t._v("​\t\n​")]),t._v(" "),a("h2",{attrs:{id:"三、es5-every和some方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、es5-every和some方法"}},[t._v("#")]),t._v(" 三、ES5-every和some方法：")]),t._v(" "),a("h3",{attrs:{id:"_1-every"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-every"}},[t._v("#")]),t._v(" 1.every")]),t._v(" "),a("p",[t._v("​\t\t\t是所有函数的每个回调都返回true的时候才会返回true，当遇到false的时候终止执行，返回false。")]),t._v(" "),a("h3",{attrs:{id:"_2-some"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-some"}},[t._v("#")]),t._v(" 2.some")]),t._v(" "),a("p",[t._v("​\t\t\t函数是存在有一个函数返回true的时候终止执行并返回true，否则返回false")]),t._v(" "),a("h3",{attrs:{id:"_3-array-isarray-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-array-isarray-obj"}},[t._v("#")]),t._v(" 3.Array.isArray(obj)")]),t._v(" "),a("p",[t._v("​\t\t\tArray对象的一个静态函数，用来判断一个对象是不是数组")]),t._v(" "),a("h3",{attrs:{id:"_4-filter-function-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-filter-function-element"}},[t._v("#")]),t._v(" 4.filter(function(element))")]),t._v(" "),a("p",[t._v("​\t\t\t返回数组的一个子集，回调函数用于逻辑判断是否返回，返回true则把当前元素加到返回数组中，false则不加")]),t._v(" "),a("h3",{attrs:{id:"_5-reduce-or-reduceright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-reduce-or-reduceright"}},[t._v("#")]),t._v(" 5.reduce or reduceRight")]),t._v(" "),a("p",[t._v("​\t\t\treduce(function(v1,v2),value) / .reduceRight(functio(v1,v2),value)")]),t._v(" "),a("p",[t._v("​\tconsole.log(arr.reduce(function(v1,v2){\n​\t\t return v1 + v2;\n​\t\t})) // 21\n​\t\t//开始是1+2 = 3，之后3+3 =6，之后6+4 =10，之后\n​\t\t//10+5 =15，最后15+6 =21\n​\t\tconsole.log(arr.reduce(function(v1,v2){\n​\t\t\t  return v1 - v2;\n​\t\t},100)) // 79\n​\t\t//开始的时候100-1=99，之后99-2=97，之后97-3=94，之后\n​\t\t//94-4=90，之后90-5=85，最后85-6=79")])])}),[],!1,null,null,null);a.default=e.exports}}]);